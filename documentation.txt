DOCUMENTATION
-------------

1. Types of Tabs in this library.
There are three types of tabs:
Swipable tabs: one can swipe between these tabs and the tabs have corresponding tab buttons.
Swipable tabs without tab buttons: One can swipe between these tabs but they lack tab buttons.
Non swipable tabs: These tabs have corresponding tab buttons but one cannot swipe between them.

2. Adding tabs to a container element
Any element capable of containing children can be a container element but I strongly recommend that you use a < div > element for container element. For proper functioning, the container element should be empty and its height and width must be defined prior to addition of tabs. The tabs can be added by calling the methods as shown below:
Adding swipable tabs with tab buttons:
    addSwipableTabs(
        containerElementID,
        tabsObjectsArray,
        tabNamesArray
    )                                    
Adding swipable tabs without tab buttons:
    addSwipableTabsWithoutTabButtons(
        containerElementID,
        tabsObjectsArray
    )                                    
Adding non swipable tabs:
    addNonSwipableTabs(
        containerElementID,
        tabsObjectsArray,
        tabNamesArray
    )                                    
Explaining the arguments
containerElementID: This is the 'id' attribute value of the element which is to contain the tabs.
tabsObjectsArray: This is the collection of HTML objects which are to be the content of the tabs in the order in which they are to be added.
tabNamesArray: This is the collection of string data for the creation of the tab buttons for the tabs. They must appear in an order corresponding to that of the tab objects in the previous collection.
These methods can be used to add tabs to an empty element or to an element already containing some tabs.

3. Customising the style of the tabs and container
The parameters passed to the function below are all string data cotnaining the respective css code. I would strongly recommend that you only customise color, background-color and border selectors of the tab views so as to get the anticipated functioning. In order to understand how the custom styles map to the views, you may have a look at the views hierarchy in number 10 below.
    customiseTabsAndComponentsStyles(
        customTabsContainerStyleString,
        customTabStyleString,
        customTabContentContainerStyleString,
        customTabButtonsStyleString,
        customTabButtonsHoverStyleString,
        customTabButtonsPressedStyleString,
        customActiveTabButtonStyle
    )                            

4. Attach tab change listener
The tab change listener is attached during addition of tabs. I would recommend attaching the listener during initial addition only as subsequent attachment overwrites the initial listener and consumes resources that can be saved. Whenever a user changes the tab, the listener is called and the indices of the current and previous tabs are passed to it id est onTabChangeListener(currentTabIndex, previousTabIndex) . The listener can be attached as follows:
For swipable tabs with tabButtons:
    addSwipableTabs(
        containerElementID,
        tabsObjectsArray,
        tabNamesArray,
        onChangeTabListener
    )                                    
For swipable tabs without tab buttons:
    addSwipableTabsWithoutTabButtons(
        containerElementID,
        tabsObjectsArray,
        onChangeTabListener
    )                                    
For non swipable tabs:
    addNonSwipableTabs(
        containerElementID,
        tabsObjectsArray,
        tabNamesArray,
        onChangeTabListener
    )                                    

5. Getting tab views.
One can get the elements involved in the tab views as follows:
Getting tab buttons container:
    getTabButtonsContainer(containerElementID)                                    
Getting the tab's root view:
    getTab(containerElementID, tabIndex)                                    
Getting the tab's content container, which is the child of the tab's root view:
    getTabContentContainer(containerElementID, tabIndex)                                    

6. Removing a tab.
In order to remove a tab, one can call the removeTab function and pass the id of the container element and the index of the tab as follows:
    removeTab(containerElementID, tabIndex)                            

7. Appending tab content
To append tab content, one can use one of the two methods for appending tab content. One of the methods accepts html object whereas the other accepts string data which is the html code of the content to be appended. One may append tab content as follows:
Appending tab content by passing the html object to be appended:
    appendTabContent(
        containerElementID,
        tabIndex,
        elementObject
    )                                    
Appending tab content by passing the string data containing the html element:
    appendTabContentHTML(
        containerElementID,
        tabIndex,
        elementString
    )                                    

8. Viewing this documentation.
In order to view this documentation, just call the method below without passing parameters:
    showDocumentation()                            

9. Viewing the list of functions for you.
In order to view a list of the functions I have made for you, just call the method below without any arguments.
    showListFunctions()                            

10. Hierarchy of views used in this project.
The views I used in this project are configured in the following way:
    containerElement
        tabButtonsContainer
        tabsContainer
            tabsContainerChild
                tab
                    tabContentContainer
                            
containerElement - This is the element whose id attribute you passed to the methods for addition of tabs. It contains two elements which are added by my functions.
tabButtonsContainer - This is the element that contains the tab buttons.
tabsContainer - This is the element whose child contains the tabs.
tabsContainerChild - This is the element that contains the tabs.
tab - This element is the root element of the tab.
tabContentContainer - This is the child of the tab. This is the element that contains your tab's content.

11. Preventing the display of debugging messages for production
While using in production enviroment, one can prevent the display of debugging error popups by calling the method below:
    disableDeduggingDialogs()                            
To re-enable the debugging popup error messages, one can call the method below:
    enableDebuggingDialogs()                            

12. Adding tab dimensions
Even though I do not recommend this, tab dimensions can be specified during the addition of tabs by providing these as the last two parameters. Please note that if you want to provide the tab dimensions and omit the tab change listener, you must replace the listener with null, "" or undefined in order to maintain the order of the arguments. Examples are as follows:
    addSwipableTabs(
        containerElementID,
        tabsObjectsArray,
        tabNamesArray,
        onChangeTabListener,
        tabWidth,
        tabHeight
    )

    addSwipableTabsWithoutTabButtons(
        containerElementID,
        tabsObjectsArray,
        onChangeTabListener,
        tabWidth,
        tabHeight
    )

    addNonSwipableTabs(
        containerElementID,
        tabsObjectsArray,
        tabNamesArray,
        onChangeTabListener,
        tabWidth,
        tabHeight
    )                            

13. THANK YOU VERY VERY VERY MUCH FOR USING MY PRODUCT, IT MEANS A LOT TO ME ðŸ¤—. HAVE FUN AND GOOD LUCK. ðŸ˜Ž